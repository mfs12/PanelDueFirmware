#include "UI/ProvelScreens.hpp"

#include "UI/DisplaySize.hpp"

#define DEBUG 2
#include "Debug.hpp"

namespace Provel {

#define PROVEL_SCREENS_LINE_NUM (8)
#define PROVEL_SCREENS_LINE_WIDTH (DISPLAY_Y)
#define PROVEL_SCREENS_LINE_HEIGHT (DISPLAY_X / PROVEL_SCREENS_LINE_NUM)
#define PROVEL_SCREENS_LINE_ROW(num) (num * PROVEL_SCREENS_LINE_WIDTH)
#define PROVEL_SCREENS_LINE_COL(num) (num * PROVEL_SCREENS_LINE_HEIGHT)

ScreenSplash::ScreenSplash()
{
	dbg("\r\n");
	timeout = 1000;
	title = new Title(PROVEL_SCREENS_LINE_ROW(0), PROVEL_SCREENS_LINE_COL(0), PROVEL_SCREENS_LINE_WIDTH, PROVEL_SCREENS_LINE_HEIGHT, "title: PROVEL");
	version = new Title(PROVEL_SCREENS_LINE_ROW(0), PROVEL_SCREENS_LINE_COL(1), PROVEL_SCREENS_LINE_WIDTH, PROVEL_SCREENS_LINE_HEIGHT, "text: " VERSION_TEXT);

	Add(title);
	Add(version);
}

ScreenSplash::~ScreenSplash()
{
}


ScreenHoming::ScreenHoming()
{
	title = new Title(PROVEL_SCREENS_LINE_ROW(0), PROVEL_SCREENS_LINE_COL(0), PROVEL_SCREENS_LINE_WIDTH, PROVEL_SCREENS_LINE_HEIGHT, "title: HOMING");
	stop = new Button(PROVEL_SCREENS_LINE_ROW(0), PROVEL_SCREENS_LINE_COL(6), PROVEL_SCREENS_LINE_WIDTH, PROVEL_SCREENS_LINE_HEIGHT, "btn: STOP", 0, 0);
	status = new Status(PROVEL_SCREENS_LINE_ROW(0), PROVEL_SCREENS_LINE_COL(7), PROVEL_SCREENS_LINE_WIDTH, PROVEL_SCREENS_LINE_HEIGHT, Status::State::Normal);

	Add(title);
	Add(stop);
	Add(status);
}

ScreenHoming::~ScreenHoming()
{
}


ScreenFileLoaded::ScreenFileLoaded()
{
	title = new Title(PROVEL_SCREENS_LINE_ROW(0), PROVEL_SCREENS_LINE_COL(0), PROVEL_SCREENS_LINE_WIDTH, PROVEL_SCREENS_LINE_HEIGHT, "title: FILE LOADED");
	acme = new Text(PROVEL_SCREENS_LINE_ROW(0), PROVEL_SCREENS_LINE_COL(1), PROVEL_SCREENS_LINE_WIDTH, PROVEL_SCREENS_LINE_HEIGHT, "text: ACME");
	cup = new Text(PROVEL_SCREENS_LINE_ROW(0), PROVEL_SCREENS_LINE_COL(2), PROVEL_SCREENS_LINE_WIDTH, PROVEL_SCREENS_LINE_HEIGHT, "text: CUP");
	nozzle = new Text(PROVEL_SCREENS_LINE_ROW(0), PROVEL_SCREENS_LINE_COL(3), PROVEL_SCREENS_LINE_WIDTH, PROVEL_SCREENS_LINE_HEIGHT, "text: NOZZLE");
	time = new Text(PROVEL_SCREENS_LINE_ROW(0), PROVEL_SCREENS_LINE_COL(4), PROVEL_SCREENS_LINE_WIDTH, PROVEL_SCREENS_LINE_HEIGHT, "text: TIME");
	copoly = new Text(PROVEL_SCREENS_LINE_ROW(0), PROVEL_SCREENS_LINE_COL(5), PROVEL_SCREENS_LINE_WIDTH, PROVEL_SCREENS_LINE_HEIGHT, "text: COPOLY");
	startOrClear = new ButtonDouble(PROVEL_SCREENS_LINE_ROW(0), PROVEL_SCREENS_LINE_COL(6), PROVEL_SCREENS_LINE_WIDTH, PROVEL_SCREENS_LINE_HEIGHT, "btn: START", "btn: CLEAR");
	status = new Status(PROVEL_SCREENS_LINE_ROW(0), PROVEL_SCREENS_LINE_COL(7), PROVEL_SCREENS_LINE_WIDTH, PROVEL_SCREENS_LINE_HEIGHT, Status::State::Normal);

	Add(title);
	Add(acme);
	Add(cup);
	Add(nozzle);
	Add(time);
	Add(copoly);
	Add(startOrClear);
	Add(status);
}

ScreenFileLoaded::~ScreenFileLoaded()
{
}

ScreenFault::ScreenFault()
{
	title = new Title(PROVEL_SCREENS_LINE_ROW(0), PROVEL_SCREENS_LINE_COL(0), PROVEL_SCREENS_LINE_WIDTH, PROVEL_SCREENS_LINE_HEIGHT, "title: FAULT");
	text = new Text(PROVEL_SCREENS_LINE_ROW(0), PROVEL_SCREENS_LINE_COL(4), PROVEL_SCREENS_LINE_WIDTH, PROVEL_SCREENS_LINE_HEIGHT, "text: TEXT");
	clear = new Button(PROVEL_SCREENS_LINE_ROW(0), PROVEL_SCREENS_LINE_COL(6), PROVEL_SCREENS_LINE_WIDTH, PROVEL_SCREENS_LINE_HEIGHT, "btn: CLEAR", 0, 0);
	status = new Status(PROVEL_SCREENS_LINE_ROW(0), PROVEL_SCREENS_LINE_COL(7), PROVEL_SCREENS_LINE_WIDTH, PROVEL_SCREENS_LINE_HEIGHT, Status::State::Error);

	Add(title);
	Add(text);
	Add(clear);
	Add(status);
}

ScreenFault::~ScreenFault()
{
}

ScreenHeating::ScreenHeating()
{
	title = new Title(PROVEL_SCREENS_LINE_ROW(0), PROVEL_SCREENS_LINE_COL(0), PROVEL_SCREENS_LINE_WIDTH, PROVEL_SCREENS_LINE_HEIGHT, "title: HEATING");
	acme = new Text(PROVEL_SCREENS_LINE_ROW(0), PROVEL_SCREENS_LINE_COL(1), PROVEL_SCREENS_LINE_WIDTH, PROVEL_SCREENS_LINE_HEIGHT, "text: ACME");
	print = new Text(PROVEL_SCREENS_LINE_ROW(0), PROVEL_SCREENS_LINE_COL(2), PROVEL_SCREENS_LINE_WIDTH, PROVEL_SCREENS_LINE_HEIGHT, "text: PRINT");
	set = new Text(PROVEL_SCREENS_LINE_ROW(0), PROVEL_SCREENS_LINE_COL(3), PROVEL_SCREENS_LINE_WIDTH, PROVEL_SCREENS_LINE_HEIGHT, "text: SET");
	cup = new Text(PROVEL_SCREENS_LINE_ROW(0), PROVEL_SCREENS_LINE_COL(4), PROVEL_SCREENS_LINE_WIDTH, PROVEL_SCREENS_LINE_HEIGHT, "text: CUP");
	set2 = new Text(PROVEL_SCREENS_LINE_ROW(0), PROVEL_SCREENS_LINE_COL(5), PROVEL_SCREENS_LINE_WIDTH, PROVEL_SCREENS_LINE_HEIGHT, "text: SET2");
	stop = new Button(PROVEL_SCREENS_LINE_ROW(0), PROVEL_SCREENS_LINE_COL(6), PROVEL_SCREENS_LINE_WIDTH, PROVEL_SCREENS_LINE_HEIGHT, "btn: STOP", 0, 0);
	status = new Status(PROVEL_SCREENS_LINE_ROW(0), PROVEL_SCREENS_LINE_COL(7), PROVEL_SCREENS_LINE_WIDTH, PROVEL_SCREENS_LINE_HEIGHT);

	Add(title);
	Add(acme);
	Add(print);
	Add(set);
	Add(cup);
	Add(set2);
	Add(stop);
	Add(status);
}

ScreenHeating::~ScreenHeating()
{
}

ScreenIdle::ScreenIdle()
{
	Title *title;
	Button *load;
	Button *home;
	Button *printer;
	Button *purge;

	title = new Title(PROVEL_SCREENS_LINE_ROW(0), PROVEL_SCREENS_LINE_COL(0), PROVEL_SCREENS_LINE_WIDTH, PROVEL_SCREENS_LINE_HEIGHT, "title: IDLE");
	load = new Button(PROVEL_SCREENS_LINE_ROW(0), PROVEL_SCREENS_LINE_COL(1), PROVEL_SCREENS_LINE_WIDTH, PROVEL_SCREENS_LINE_HEIGHT, "btn: LOAD", 0, 0);
	home = new Button(PROVEL_SCREENS_LINE_ROW(0), PROVEL_SCREENS_LINE_COL(2), PROVEL_SCREENS_LINE_WIDTH, PROVEL_SCREENS_LINE_HEIGHT, "btn: HOME", 0, 0);
	printer = new Button(PROVEL_SCREENS_LINE_ROW(0), PROVEL_SCREENS_LINE_COL(3), PROVEL_SCREENS_LINE_WIDTH, PROVEL_SCREENS_LINE_HEIGHT, "btn: PRINTER", 0, 0);
	purge = new Button(PROVEL_SCREENS_LINE_ROW(0), PROVEL_SCREENS_LINE_COL(4), PROVEL_SCREENS_LINE_WIDTH, PROVEL_SCREENS_LINE_HEIGHT, "btn: PURGE", 0, 0);

	Add(title);
	Add(load);
	Add(home);
	Add(printer);
	Add(purge);
}

ScreenIdle::~ScreenIdle()
{
}

ScreenLoading::ScreenLoading()
{
	title = new Title(PROVEL_SCREENS_LINE_ROW(0), PROVEL_SCREENS_LINE_COL(0), PROVEL_SCREENS_LINE_WIDTH, PROVEL_SCREENS_LINE_HEIGHT, "title: LOADING FILE");
	cancel = new Button(PROVEL_SCREENS_LINE_ROW(0), PROVEL_SCREENS_LINE_COL(7), PROVEL_SCREENS_LINE_WIDTH, PROVEL_SCREENS_LINE_HEIGHT, "btn: CANCEL", 0, 0);

	Add(title);
	Add(cancel);
}

ScreenLoading::~ScreenLoading()
{
}


ScreenPrinter::ScreenPrinter()
{
	title = new Title(PROVEL_SCREENS_LINE_ROW(0), PROVEL_SCREENS_LINE_COL(0), PROVEL_SCREENS_LINE_WIDTH, PROVEL_SCREENS_LINE_HEIGHT, "title: PRINTER");
	temp = new Text(PROVEL_SCREENS_LINE_ROW(0), PROVEL_SCREENS_LINE_COL(1), PROVEL_SCREENS_LINE_WIDTH, PROVEL_SCREENS_LINE_HEIGHT, "text: PURGE");
	plusMinus = new ButtonDouble(PROVEL_SCREENS_LINE_ROW(0), PROVEL_SCREENS_LINE_COL(2), PROVEL_SCREENS_LINE_WIDTH, PROVEL_SCREENS_LINE_HEIGHT, "btn: PLUS", "btn: MINUS");
	zCalibrate = new Button(PROVEL_SCREENS_LINE_ROW(0), PROVEL_SCREENS_LINE_COL(3), PROVEL_SCREENS_LINE_WIDTH, PROVEL_SCREENS_LINE_HEIGHT, "btn: ZCALIBRATE", 0, 0);
	indexCup = new Button(PROVEL_SCREENS_LINE_ROW(0), PROVEL_SCREENS_LINE_COL(4), PROVEL_SCREENS_LINE_WIDTH, PROVEL_SCREENS_LINE_HEIGHT, "btn: INDEXCUP", 0, 0);
	access = new Button(PROVEL_SCREENS_LINE_ROW(0), PROVEL_SCREENS_LINE_COL(5), PROVEL_SCREENS_LINE_WIDTH, PROVEL_SCREENS_LINE_HEIGHT, "btn: ACCESS", 0, 0);
	enterExit = new ButtonDouble(PROVEL_SCREENS_LINE_ROW(0), PROVEL_SCREENS_LINE_COL(7), PROVEL_SCREENS_LINE_WIDTH, PROVEL_SCREENS_LINE_HEIGHT, "btn: ENTER", "btn: EXIT");

	Add(title);
	Add(plusMinus);
	Add(zCalibrate);
	Add(indexCup);
	Add(access);
	Add(enterExit);
}

ScreenPrinter::~ScreenPrinter()
{
}

ScreenPrinting::ScreenPrinting()
{
	title = new Title(PROVEL_SCREENS_LINE_ROW(0), PROVEL_SCREENS_LINE_COL(0), PROVEL_SCREENS_LINE_WIDTH, PROVEL_SCREENS_LINE_HEIGHT, "title: PRINTING");
	acme = new Text(PROVEL_SCREENS_LINE_ROW(0), PROVEL_SCREENS_LINE_COL(1), PROVEL_SCREENS_LINE_WIDTH, PROVEL_SCREENS_LINE_HEIGHT, "text: ACME");
	time = new Text(PROVEL_SCREENS_LINE_ROW(0), PROVEL_SCREENS_LINE_COL(4), PROVEL_SCREENS_LINE_WIDTH, PROVEL_SCREENS_LINE_HEIGHT, "text: TIME");
	status = new Status(PROVEL_SCREENS_LINE_ROW(0), PROVEL_SCREENS_LINE_COL(7), PROVEL_SCREENS_LINE_WIDTH, PROVEL_SCREENS_LINE_HEIGHT);

	Add(title);
	Add(acme);
	Add(time);
	Add(status);
}

ScreenPrinting::~ScreenPrinting()
{
}

ScreenPurging::ScreenPurging()
{
	title = new Title(PROVEL_SCREENS_LINE_ROW(0), PROVEL_SCREENS_LINE_COL(0), PROVEL_SCREENS_LINE_WIDTH, PROVEL_SCREENS_LINE_HEIGHT, "title: PURGING");
	temp = new Text(PROVEL_SCREENS_LINE_ROW(0), PROVEL_SCREENS_LINE_COL(1), PROVEL_SCREENS_LINE_WIDTH, PROVEL_SCREENS_LINE_HEIGHT, "text: TEMP");
	set = new Text(PROVEL_SCREENS_LINE_ROW(0), PROVEL_SCREENS_LINE_COL(2), PROVEL_SCREENS_LINE_WIDTH, PROVEL_SCREENS_LINE_HEIGHT, "text: SET");
	time = new Text(PROVEL_SCREENS_LINE_ROW(0), PROVEL_SCREENS_LINE_COL(3), PROVEL_SCREENS_LINE_WIDTH, PROVEL_SCREENS_LINE_HEIGHT, "text: TIME");
	stop = new Button(PROVEL_SCREENS_LINE_ROW(0), PROVEL_SCREENS_LINE_COL(6), PROVEL_SCREENS_LINE_WIDTH, PROVEL_SCREENS_LINE_HEIGHT, "btn: STOP", 0, 0);
	status = new Status(PROVEL_SCREENS_LINE_ROW(0), PROVEL_SCREENS_LINE_COL(7), PROVEL_SCREENS_LINE_WIDTH, PROVEL_SCREENS_LINE_HEIGHT);

	Add(title);
	Add(temp);
	Add(set);
	Add(time);
	Add(stop);
	Add(status);
}

ScreenPurging::~ScreenPurging()
{
}

ScreenWarning::ScreenWarning()
{
	title = new Title(PROVEL_SCREENS_LINE_ROW(0), PROVEL_SCREENS_LINE_COL(0), PROVEL_SCREENS_LINE_WIDTH, PROVEL_SCREENS_LINE_HEIGHT, "title: WARNING");
	text = new Text(PROVEL_SCREENS_LINE_ROW(0), PROVEL_SCREENS_LINE_COL(1), PROVEL_SCREENS_LINE_WIDTH, PROVEL_SCREENS_LINE_HEIGHT, "text: TEXT");
	status = new Status(PROVEL_SCREENS_LINE_ROW(0), PROVEL_SCREENS_LINE_COL(7), PROVEL_SCREENS_LINE_WIDTH, PROVEL_SCREENS_LINE_HEIGHT, Status::State::Warning);

	Add(title);
	Add(text);
	Add(status);
}

ScreenWarning::~ScreenWarning()
{
}

ScreenZCalibrate::ScreenZCalibrate()
{
	title = new Title(PROVEL_SCREENS_LINE_ROW(0), PROVEL_SCREENS_LINE_COL(0), PROVEL_SCREENS_LINE_WIDTH, PROVEL_SCREENS_LINE_HEIGHT, "title: ZCALIBRATE");
	offset = new Text(PROVEL_SCREENS_LINE_ROW(0), PROVEL_SCREENS_LINE_COL(1), PROVEL_SCREENS_LINE_WIDTH, PROVEL_SCREENS_LINE_HEIGHT, "text: OFFSET");
	plusMinus = new ButtonDouble(PROVEL_SCREENS_LINE_ROW(0), PROVEL_SCREENS_LINE_COL(2), PROVEL_SCREENS_LINE_WIDTH, PROVEL_SCREENS_LINE_HEIGHT, "btn: PLUS", "btn: MINUS");
	enterExit = new ButtonDouble(PROVEL_SCREENS_LINE_ROW(0), PROVEL_SCREENS_LINE_COL(7), PROVEL_SCREENS_LINE_WIDTH, PROVEL_SCREENS_LINE_HEIGHT, "btn: ENTER", "btn: EXIT");

	Add(title);
	Add(offset);
	Add(plusMinus);
	Add(enterExit);
}

ScreenZCalibrate::~ScreenZCalibrate()
{
}


ScreenGcode::ScreenGcode()
{
	action = new ActionGcode("M115\n");

	title = new Title(PROVEL_SCREENS_LINE_ROW(0), PROVEL_SCREENS_LINE_COL(0), PROVEL_SCREENS_LINE_WIDTH, PROVEL_SCREENS_LINE_HEIGHT, "title: Gcode Test");
	gcode = new Button(PROVEL_SCREENS_LINE_ROW(0), PROVEL_SCREENS_LINE_COL(6), PROVEL_SCREENS_LINE_WIDTH, PROVEL_SCREENS_LINE_HEIGHT, "btn: Gcode", 0, 0, action);

	Add(title);
	Add(gcode);
}

ScreenGcode::~ScreenGcode()
{
}

}
